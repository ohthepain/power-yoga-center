
name: Update Config

on: [push]

permissions:
  contents: read

jobs:
  BuildConfig:

    # thrift is too difficult to build on the other platforms
    runs-on: windows-latest #ubuntu-latest
    permissions:
      # IMPORTANT: this permission is mandatory for trusted publishing
      id-token: write
    env:
      CONFIG_API_TOKEN: ${{ secrets.CONFIG_API_KEY }}

    steps:
    - uses: actions/checkout@v4

    - name: Print runner OS - it has only been tested on Windows
      run: echo "The runner's operating system is ${{ runner.os }}"    

    - name: Print runner OS - you are running on an untested platform
      if: runner.os != 'Windows'
      run: echo "The runner's operating system is ${{ runner.os }}"    

    - name: Create new config and get config id - Windows
      if: runner.os == 'Windows'
      run: |
        $json = '{"gitHash": "db1b58efcf8c0366995c9a28afcbcae9c2727ed2", "branchName": "main", "projectName": "Power Yoga Center"}'
        $headers = @{
          'Content-Type' = 'application/json'
          'Authorization' = "Bearer ${{ secrets.CONFIG_API_KEY }}"
        }
        $response = Invoke-RestMethod -Uri https://config.allknownmetalbands.com/api/configs -Method Post -Body $json -Headers $headers
        Write-Output $response
        $configId = ($response.id)
        Write-Output "Config ID: $configId"
        echo "CONFIG_ID=$configId" | Out-File -Append -FilePath $env:GITHUB_ENV
      shell: pwsh

    - name: Create new config and get config id - non-Windows (untested)
      if: runner.os != 'Windows'
      run: |
        echo Hi from an UNTESTED non-windows action
        RESPONSE=$(curl -X POST https://config.allknownmetalbands.com/api/configs -H "Content-Type: application/json" -d '{"gitHash": "db1b58efcf8c0366995c9a28afcbcae9c2727ed2", "branchName": "main", "projectName": "Power Yoga Center"}' -H "Authorization: Bearer ${{ secrets.CONFIG_API_KEY }}")
        echo "$RESPONSE"
        CONFIG_ID=$(echo "$RESPONSE" | sed -n 's/.*"id":"\([^"]*\)".*/\1/p')
        echo "Config ID: ${CONFIG_ID}"

    - name: Generate thrift source
      working-directory: ./Config/Thrift
      run: |
        ../../thrift-0.20.0.exe --gen py Config.thrift
  
    - name: Install dependencies
      run: |
        pip install -r requirements.txt

    - name: Update config status to BUILDING (windows)
      if: runner.os == 'Windows'
      run: |
        $json = @{
          'id' = ${{ env.CONFIG_ID }}
          'status' = "BUILDING"
        } | ConvertTo-Json
        $headers = @{
          'Content-Type' = 'application/json'
          'Authorization' = "Bearer ${{ secrets.CONFIG_API_KEY }}"
        }
        $response = Invoke-RestMethod -Uri https://config.allknownmetalbands.com/api/configs/update-status -Method Put -Body $json -Headers $headers
        Write-Output $response
      shell: pwsh

    - name: Update config status to BUILDING (non-windows, untested)
      if: runner.os != 'Windows'
      run: |
        echo Hi from an UNTESTED non-windows action
        curl -X POST https://config.allknownmetalbands.com/api/configs/update-status \
          -H "Content-Type: application/json" \
          -H "Authorization: Bearer ${{ secrets.CONFIG_API_KEY }}" \
          -d '{"id": "${CONFIG_ID}", "status": "BUILDING"}' 
  
    - name: Build config
      working-directory: ./Config/Excel
      run: |
        dir
        ./convert.sh
        ./mutate.sh
        cp ../../config.bin "../../config_${{ env.CONFIG_ID }}.bin"
        echo pwd
        pwd
        echo ls
        ls
        echo ls ../..
        ls ../..

    - name: Calculate MD5 checksum (windows)
      if: runner.os == 'Windows'
      run: |
        $ConfigFile = "config_${{ env.CONFIG_ID }}.bin"
        $Checksum = (Get-FileHash -Path $ConfigFile -Algorithm MD5).Hash
        Write-Host "CHECKSUM is $Checksum"
      shell: pwsh
      env:
        CONFIG_API_TOKEN: ${{ secrets.CONFIG_API_TOKEN }}
        # CONFIG_ID: 48
        
    - name: Calculate checksum (non-windows, untested)
      working-directory: ./Config/Excel
      run: |
        CHECKSUM=$(md5sum "config_${CONFIG_ID}.bin"
        #  > "../../config_${{ steps.confignum.outputs.result }}.md5")
        echo "CHECKSUM is $CHECKSUM"

    - name: "install aws cli"
      uses: ohthepain/action-install-aws-cli@v0.14

    - name: test aws cli
      run: aws s3 ls
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: 'eu-central-1'

    - name: Upload S3
      uses: hkusu/s3-upload-action@v2
      id: upload # specify some ID for use in subsequent steps
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: 'eu-central-1'
        aws-bucket: 'yoga.config'
        file-path: "./config_${CONFIG_ID}.bin"
        destination-dir: '/'
        output-file-url: 'true' # specify output
    - name: Show Config URL
      run: echo '${{ steps.upload.outputs.file-url }}' # use output
      
    - name: Complete the config
      if: runner.os == 'Windows'
      run: |
        # $json = @{
        #   'id' = ${{ env.CONFIG_ID }}
        #   'status' = "BUILDING"
        # } | ConvertTo-Json
        $json = @{
          'id' = ${{ env.CONFIG_ID }}
          'checksumMd5' = "${CHECKSUM}"
          "downloadUrl": "${{ steps.upload.outputs.file-url }}"}
          } | ConvertTo-Json
        $headers = @{
          'Content-Type' = 'application/json'
          'Authorization' = "Bearer ${{ secrets.CONFIG_API_KEY }}"
        }
        $response = Invoke-RestMethod -Uri https://config.allknownmetalbands.com/api/configs/update-status -Method Put -Body $json -Headers $headers
        Write-Output $response
      shell: pwsh
    
    - name: Complete the config non-windows (untested)
      if: runner.os != 'Windows'
      run: |
        response = curl -X POST https://config.allknownmetalbands.com/api/configs/complete \
          --header "Content-Type: application/json" \
          --header "Authorization: Bearer ${{ secrets.CONFIG_API_KEY }}" \
          -d '{"id": "${CONFIG_ID}", "checksumMd5": "${CHECKSUM}", "downloadUrl": "${{ steps.upload.outputs.file-url }}"}' 
