#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import shared.ttypes

from thrift.transport import TTransport
all_structs = []


class PoseEntry(object):
    """
    Attributes:
     - poseEntryId
     - englishName
     - realName
     - seconds
     - poseFilename
     - backgroundFilename
     - matFilename
     - swooshFilename
     - shadowFilename
     - shortAudioFilename
     - detailAudioFilename
    """


    def __init__(self, poseEntryId=None, englishName=None, realName=None, seconds=None, poseFilename=None, backgroundFilename=None, matFilename=None, swooshFilename=None, shadowFilename=None, shortAudioFilename=None, detailAudioFilename=None,):
        self.poseEntryId = poseEntryId
        self.englishName = englishName
        self.realName = realName
        self.seconds = seconds
        self.poseFilename = poseFilename
        self.backgroundFilename = backgroundFilename
        self.matFilename = matFilename
        self.swooshFilename = swooshFilename
        self.shadowFilename = shadowFilename
        self.shortAudioFilename = shortAudioFilename
        self.detailAudioFilename = detailAudioFilename

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.poseEntryId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.englishName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.realName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.I32:
                    self.seconds = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 30:
                if ftype == TType.STRING:
                    self.poseFilename = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 31:
                if ftype == TType.STRING:
                    self.backgroundFilename = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 32:
                if ftype == TType.STRING:
                    self.matFilename = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 33:
                if ftype == TType.STRING:
                    self.swooshFilename = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 34:
                if ftype == TType.STRING:
                    self.shadowFilename = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 35:
                if ftype == TType.STRING:
                    self.shortAudioFilename = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 36:
                if ftype == TType.STRING:
                    self.detailAudioFilename = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('PoseEntry')
        if self.poseEntryId is not None:
            oprot.writeFieldBegin('poseEntryId', TType.STRING, 1)
            oprot.writeString(self.poseEntryId.encode('utf-8') if sys.version_info[0] == 2 else self.poseEntryId)
            oprot.writeFieldEnd()
        if self.englishName is not None:
            oprot.writeFieldBegin('englishName', TType.STRING, 10)
            oprot.writeString(self.englishName.encode('utf-8') if sys.version_info[0] == 2 else self.englishName)
            oprot.writeFieldEnd()
        if self.realName is not None:
            oprot.writeFieldBegin('realName', TType.STRING, 11)
            oprot.writeString(self.realName.encode('utf-8') if sys.version_info[0] == 2 else self.realName)
            oprot.writeFieldEnd()
        if self.seconds is not None:
            oprot.writeFieldBegin('seconds', TType.I32, 20)
            oprot.writeI32(self.seconds)
            oprot.writeFieldEnd()
        if self.poseFilename is not None:
            oprot.writeFieldBegin('poseFilename', TType.STRING, 30)
            oprot.writeString(self.poseFilename.encode('utf-8') if sys.version_info[0] == 2 else self.poseFilename)
            oprot.writeFieldEnd()
        if self.backgroundFilename is not None:
            oprot.writeFieldBegin('backgroundFilename', TType.STRING, 31)
            oprot.writeString(self.backgroundFilename.encode('utf-8') if sys.version_info[0] == 2 else self.backgroundFilename)
            oprot.writeFieldEnd()
        if self.matFilename is not None:
            oprot.writeFieldBegin('matFilename', TType.STRING, 32)
            oprot.writeString(self.matFilename.encode('utf-8') if sys.version_info[0] == 2 else self.matFilename)
            oprot.writeFieldEnd()
        if self.swooshFilename is not None:
            oprot.writeFieldBegin('swooshFilename', TType.STRING, 33)
            oprot.writeString(self.swooshFilename.encode('utf-8') if sys.version_info[0] == 2 else self.swooshFilename)
            oprot.writeFieldEnd()
        if self.shadowFilename is not None:
            oprot.writeFieldBegin('shadowFilename', TType.STRING, 34)
            oprot.writeString(self.shadowFilename.encode('utf-8') if sys.version_info[0] == 2 else self.shadowFilename)
            oprot.writeFieldEnd()
        if self.shortAudioFilename is not None:
            oprot.writeFieldBegin('shortAudioFilename', TType.STRING, 35)
            oprot.writeString(self.shortAudioFilename.encode('utf-8') if sys.version_info[0] == 2 else self.shortAudioFilename)
            oprot.writeFieldEnd()
        if self.detailAudioFilename is not None:
            oprot.writeFieldBegin('detailAudioFilename', TType.STRING, 36)
            oprot.writeString(self.detailAudioFilename.encode('utf-8') if sys.version_info[0] == 2 else self.detailAudioFilename)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.poseEntryId is None:
            raise TProtocolException(message='Required field poseEntryId is unset!')
        if self.englishName is None:
            raise TProtocolException(message='Required field englishName is unset!')
        if self.realName is None:
            raise TProtocolException(message='Required field realName is unset!')
        if self.seconds is None:
            raise TProtocolException(message='Required field seconds is unset!')
        if self.poseFilename is None:
            raise TProtocolException(message='Required field poseFilename is unset!')
        if self.backgroundFilename is None:
            raise TProtocolException(message='Required field backgroundFilename is unset!')
        if self.matFilename is None:
            raise TProtocolException(message='Required field matFilename is unset!')
        if self.swooshFilename is None:
            raise TProtocolException(message='Required field swooshFilename is unset!')
        if self.shadowFilename is None:
            raise TProtocolException(message='Required field shadowFilename is unset!')
        if self.shortAudioFilename is None:
            raise TProtocolException(message='Required field shortAudioFilename is unset!')
        if self.detailAudioFilename is None:
            raise TProtocolException(message='Required field detailAudioFilename is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Data(object):
    """
    Attributes:
     - schemaVersionId
     - poseEntries
     - poseSequences
    """


    def __init__(self, schemaVersionId=None, poseEntries=None, poseSequences=None,):
        self.schemaVersionId = schemaVersionId
        self.poseEntries = poseEntries
        self.poseSequences = poseSequences

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.schemaVersionId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.MAP:
                    self.poseEntries = {}
                    (_ktype1, _vtype2, _size0) = iprot.readMapBegin()
                    for _i4 in range(_size0):
                        _key5 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val6 = PoseEntry()
                        _val6.read(iprot)
                        self.poseEntries[_key5] = _val6
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.MAP:
                    self.poseSequences = {}
                    (_ktype8, _vtype9, _size7) = iprot.readMapBegin()
                    for _i11 in range(_size7):
                        _key12 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val13 = []
                        (_etype17, _size14) = iprot.readListBegin()
                        for _i18 in range(_size14):
                            _elem19 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                            _val13.append(_elem19)
                        iprot.readListEnd()
                        self.poseSequences[_key12] = _val13
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Data')
        if self.schemaVersionId is not None:
            oprot.writeFieldBegin('schemaVersionId', TType.I32, 1)
            oprot.writeI32(self.schemaVersionId)
            oprot.writeFieldEnd()
        if self.poseEntries is not None:
            oprot.writeFieldBegin('poseEntries', TType.MAP, 10)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.poseEntries))
            for kiter20, viter21 in self.poseEntries.items():
                oprot.writeString(kiter20.encode('utf-8') if sys.version_info[0] == 2 else kiter20)
                viter21.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.poseSequences is not None:
            oprot.writeFieldBegin('poseSequences', TType.MAP, 20)
            oprot.writeMapBegin(TType.STRING, TType.LIST, len(self.poseSequences))
            for kiter22, viter23 in self.poseSequences.items():
                oprot.writeString(kiter22.encode('utf-8') if sys.version_info[0] == 2 else kiter22)
                oprot.writeListBegin(TType.STRING, len(viter23))
                for iter24 in viter23:
                    oprot.writeString(iter24.encode('utf-8') if sys.version_info[0] == 2 else iter24)
                oprot.writeListEnd()
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.schemaVersionId is None:
            raise TProtocolException(message='Required field schemaVersionId is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(PoseEntry)
PoseEntry.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'poseEntryId', 'UTF8', None, ),  # 1
    None,  # 2
    None,  # 3
    None,  # 4
    None,  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    (10, TType.STRING, 'englishName', 'UTF8', None, ),  # 10
    (11, TType.STRING, 'realName', 'UTF8', None, ),  # 11
    None,  # 12
    None,  # 13
    None,  # 14
    None,  # 15
    None,  # 16
    None,  # 17
    None,  # 18
    None,  # 19
    (20, TType.I32, 'seconds', None, None, ),  # 20
    None,  # 21
    None,  # 22
    None,  # 23
    None,  # 24
    None,  # 25
    None,  # 26
    None,  # 27
    None,  # 28
    None,  # 29
    (30, TType.STRING, 'poseFilename', 'UTF8', None, ),  # 30
    (31, TType.STRING, 'backgroundFilename', 'UTF8', None, ),  # 31
    (32, TType.STRING, 'matFilename', 'UTF8', None, ),  # 32
    (33, TType.STRING, 'swooshFilename', 'UTF8', None, ),  # 33
    (34, TType.STRING, 'shadowFilename', 'UTF8', None, ),  # 34
    (35, TType.STRING, 'shortAudioFilename', 'UTF8', None, ),  # 35
    (36, TType.STRING, 'detailAudioFilename', 'UTF8', None, ),  # 36
)
all_structs.append(Data)
Data.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'schemaVersionId', None, None, ),  # 1
    None,  # 2
    None,  # 3
    None,  # 4
    None,  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    (10, TType.MAP, 'poseEntries', (TType.STRING, 'UTF8', TType.STRUCT, [PoseEntry, None], False), None, ),  # 10
    None,  # 11
    None,  # 12
    None,  # 13
    None,  # 14
    None,  # 15
    None,  # 16
    None,  # 17
    None,  # 18
    None,  # 19
    (20, TType.MAP, 'poseSequences', (TType.STRING, 'UTF8', TType.LIST, (TType.STRING, 'UTF8', False), False), None, ),  # 20
)
fix_spec(all_structs)
del all_structs
