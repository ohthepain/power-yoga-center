/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Config_TYPES_H
#define Config_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>
#include "shared_types.h"


namespace Yoga { namespace Config {

typedef int64_t Timestamp;

typedef std::string AssetID;

typedef int32_t SchemaVersionID;

typedef std::string PoseEntryID;

typedef std::string PoseSequenceID;

typedef std::vector<PoseEntryID>  PoseSequence;

class PoseEntry;

class Data;


class PoseEntry : public virtual ::apache::thrift::TBase {
 public:

  PoseEntry(const PoseEntry&);
  PoseEntry& operator=(const PoseEntry&);
  PoseEntry() : poseEntryId(), englishName(), realName(), seconds(0), poseFilename(), backgroundFilename(), matFilename(), swooshFilename(), shadowFilename(), shortAudioFilename(), detailAudioFilename() {
  }

  virtual ~PoseEntry() throw();
  PoseEntryID poseEntryId;
  std::string englishName;
  std::string realName;
  int32_t seconds;
  AssetID poseFilename;
  AssetID backgroundFilename;
  AssetID matFilename;
  AssetID swooshFilename;
  AssetID shadowFilename;
  AssetID shortAudioFilename;
  AssetID detailAudioFilename;

  void __set_poseEntryId(const PoseEntryID& val);

  void __set_englishName(const std::string& val);

  void __set_realName(const std::string& val);

  void __set_seconds(const int32_t val);

  void __set_poseFilename(const AssetID& val);

  void __set_backgroundFilename(const AssetID& val);

  void __set_matFilename(const AssetID& val);

  void __set_swooshFilename(const AssetID& val);

  void __set_shadowFilename(const AssetID& val);

  void __set_shortAudioFilename(const AssetID& val);

  void __set_detailAudioFilename(const AssetID& val);

  bool operator == (const PoseEntry & rhs) const
  {
    if (!(poseEntryId == rhs.poseEntryId))
      return false;
    if (!(englishName == rhs.englishName))
      return false;
    if (!(realName == rhs.realName))
      return false;
    if (!(seconds == rhs.seconds))
      return false;
    if (!(poseFilename == rhs.poseFilename))
      return false;
    if (!(backgroundFilename == rhs.backgroundFilename))
      return false;
    if (!(matFilename == rhs.matFilename))
      return false;
    if (!(swooshFilename == rhs.swooshFilename))
      return false;
    if (!(shadowFilename == rhs.shadowFilename))
      return false;
    if (!(shortAudioFilename == rhs.shortAudioFilename))
      return false;
    if (!(detailAudioFilename == rhs.detailAudioFilename))
      return false;
    return true;
  }
  bool operator != (const PoseEntry &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PoseEntry & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(PoseEntry &a, PoseEntry &b);

std::ostream& operator<<(std::ostream& out, const PoseEntry& obj);

typedef struct _Data__isset {
  _Data__isset() : poseEntries(false), poseSequences(false) {}
  bool poseEntries :1;
  bool poseSequences :1;
} _Data__isset;

class Data : public virtual ::apache::thrift::TBase {
 public:

  Data(const Data&);
  Data& operator=(const Data&);
  Data() : schemaVersionId(0) {
  }

  virtual ~Data() throw();
  SchemaVersionID schemaVersionId;
  std::map<PoseEntryID, PoseEntry>  poseEntries;
  std::map<PoseSequenceID, PoseSequence>  poseSequences;

  _Data__isset __isset;

  void __set_schemaVersionId(const SchemaVersionID val);

  void __set_poseEntries(const std::map<PoseEntryID, PoseEntry> & val);

  void __set_poseSequences(const std::map<PoseSequenceID, PoseSequence> & val);

  bool operator == (const Data & rhs) const
  {
    if (!(schemaVersionId == rhs.schemaVersionId))
      return false;
    if (__isset.poseEntries != rhs.__isset.poseEntries)
      return false;
    else if (__isset.poseEntries && !(poseEntries == rhs.poseEntries))
      return false;
    if (__isset.poseSequences != rhs.__isset.poseSequences)
      return false;
    else if (__isset.poseSequences && !(poseSequences == rhs.poseSequences))
      return false;
    return true;
  }
  bool operator != (const Data &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Data & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Data &a, Data &b);

std::ostream& operator<<(std::ostream& out, const Data& obj);

}} // namespace

#endif
