/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "Config_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace Yoga { namespace Config {


Settings::~Settings() throw() {
}


void Settings::__set_schemaVersionId(const int32_t val) {
  this->schemaVersionId = val;
}

void Settings::__set_configVersionId(const int32_t val) {
  this->configVersionId = val;
}

void Settings::__set_minClientVersion(const std::string& val) {
  this->minClientVersion = val;
}

void Settings::__set_pleaseUpdateVersion(const std::string& val) {
  this->pleaseUpdateVersion = val;
}
std::ostream& operator<<(std::ostream& out, const Settings& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Settings::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_schemaVersionId = false;
  bool isset_configVersionId = false;
  bool isset_minClientVersion = false;
  bool isset_pleaseUpdateVersion = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->schemaVersionId);
          isset_schemaVersionId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->configVersionId);
          isset_configVersionId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->minClientVersion);
          isset_minClientVersion = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->pleaseUpdateVersion);
          isset_pleaseUpdateVersion = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_schemaVersionId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_configVersionId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_minClientVersion)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_pleaseUpdateVersion)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Settings::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Settings");

  xfer += oprot->writeFieldBegin("schemaVersionId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->schemaVersionId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("configVersionId", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->configVersionId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("minClientVersion", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->minClientVersion);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pleaseUpdateVersion", ::apache::thrift::protocol::T_STRING, 11);
  xfer += oprot->writeString(this->pleaseUpdateVersion);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Settings &a, Settings &b) {
  using ::std::swap;
  swap(a.schemaVersionId, b.schemaVersionId);
  swap(a.configVersionId, b.configVersionId);
  swap(a.minClientVersion, b.minClientVersion);
  swap(a.pleaseUpdateVersion, b.pleaseUpdateVersion);
}

Settings::Settings(const Settings& other0) {
  schemaVersionId = other0.schemaVersionId;
  configVersionId = other0.configVersionId;
  minClientVersion = other0.minClientVersion;
  pleaseUpdateVersion = other0.pleaseUpdateVersion;
}
Settings& Settings::operator=(const Settings& other1) {
  schemaVersionId = other1.schemaVersionId;
  configVersionId = other1.configVersionId;
  minClientVersion = other1.minClientVersion;
  pleaseUpdateVersion = other1.pleaseUpdateVersion;
  return *this;
}
void Settings::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Settings(";
  out << "schemaVersionId=" << to_string(schemaVersionId);
  out << ", " << "configVersionId=" << to_string(configVersionId);
  out << ", " << "minClientVersion=" << to_string(minClientVersion);
  out << ", " << "pleaseUpdateVersion=" << to_string(pleaseUpdateVersion);
  out << ")";
}


UpgradeInfo::~UpgradeInfo() throw() {
}


void UpgradeInfo::__set_upgradeInfoId(const UpgradeInfoID& val) {
  this->upgradeInfoId = val;
}

void UpgradeInfo::__set_minClientVersion(const std::string& val) {
  this->minClientVersion = val;
}

void UpgradeInfo::__set_pleaseUpdateVersion(const std::string& val) {
  this->pleaseUpdateVersion = val;
}
std::ostream& operator<<(std::ostream& out, const UpgradeInfo& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t UpgradeInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_upgradeInfoId = false;
  bool isset_minClientVersion = false;
  bool isset_pleaseUpdateVersion = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->upgradeInfoId);
          isset_upgradeInfoId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->minClientVersion);
          isset_minClientVersion = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->pleaseUpdateVersion);
          isset_pleaseUpdateVersion = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_upgradeInfoId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_minClientVersion)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_pleaseUpdateVersion)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t UpgradeInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("UpgradeInfo");

  xfer += oprot->writeFieldBegin("upgradeInfoId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->upgradeInfoId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("minClientVersion", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->minClientVersion);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pleaseUpdateVersion", ::apache::thrift::protocol::T_STRING, 11);
  xfer += oprot->writeString(this->pleaseUpdateVersion);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(UpgradeInfo &a, UpgradeInfo &b) {
  using ::std::swap;
  swap(a.upgradeInfoId, b.upgradeInfoId);
  swap(a.minClientVersion, b.minClientVersion);
  swap(a.pleaseUpdateVersion, b.pleaseUpdateVersion);
}

UpgradeInfo::UpgradeInfo(const UpgradeInfo& other2) {
  upgradeInfoId = other2.upgradeInfoId;
  minClientVersion = other2.minClientVersion;
  pleaseUpdateVersion = other2.pleaseUpdateVersion;
}
UpgradeInfo& UpgradeInfo::operator=(const UpgradeInfo& other3) {
  upgradeInfoId = other3.upgradeInfoId;
  minClientVersion = other3.minClientVersion;
  pleaseUpdateVersion = other3.pleaseUpdateVersion;
  return *this;
}
void UpgradeInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "UpgradeInfo(";
  out << "upgradeInfoId=" << to_string(upgradeInfoId);
  out << ", " << "minClientVersion=" << to_string(minClientVersion);
  out << ", " << "pleaseUpdateVersion=" << to_string(pleaseUpdateVersion);
  out << ")";
}


PoseEntry::~PoseEntry() throw() {
}


void PoseEntry::__set_poseEntryId(const PoseEntryID& val) {
  this->poseEntryId = val;
}

void PoseEntry::__set_sessionId(const SessionID& val) {
  this->sessionId = val;
}

void PoseEntry::__set_englishName(const std::string& val) {
  this->englishName = val;
}

void PoseEntry::__set_sanskritName(const std::string& val) {
  this->sanskritName = val;
}

void PoseEntry::__set_seconds(const int32_t val) {
  this->seconds = val;
}

void PoseEntry::__set_poseFilename(const AssetID& val) {
  this->poseFilename = val;
}

void PoseEntry::__set_backgroundFilename(const AssetID& val) {
  this->backgroundFilename = val;
}

void PoseEntry::__set_matFilename(const AssetID& val) {
  this->matFilename = val;
}

void PoseEntry::__set_swooshFilename(const AssetID& val) {
  this->swooshFilename = val;
}

void PoseEntry::__set_shadowFilename(const AssetID& val) {
  this->shadowFilename = val;
}

void PoseEntry::__set_shortAudioFilename(const AssetID& val) {
  this->shortAudioFilename = val;
}

void PoseEntry::__set_detailAudioFilename(const AssetID& val) {
  this->detailAudioFilename = val;
}

void PoseEntry::__set_flipped(const bool val) {
  this->flipped = val;
__isset.flipped = true;
}
std::ostream& operator<<(std::ostream& out, const PoseEntry& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t PoseEntry::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_poseEntryId = false;
  bool isset_sessionId = false;
  bool isset_englishName = false;
  bool isset_sanskritName = false;
  bool isset_seconds = false;
  bool isset_poseFilename = false;
  bool isset_backgroundFilename = false;
  bool isset_matFilename = false;
  bool isset_swooshFilename = false;
  bool isset_shadowFilename = false;
  bool isset_shortAudioFilename = false;
  bool isset_detailAudioFilename = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->poseEntryId);
          isset_poseEntryId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->sessionId);
          isset_sessionId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->englishName);
          isset_englishName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->sanskritName);
          isset_sanskritName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->seconds);
          isset_seconds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->poseFilename);
          isset_poseFilename = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 31:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->backgroundFilename);
          isset_backgroundFilename = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 32:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->matFilename);
          isset_matFilename = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 33:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->swooshFilename);
          isset_swooshFilename = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 34:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->shadowFilename);
          isset_shadowFilename = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 35:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->shortAudioFilename);
          isset_shortAudioFilename = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 36:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->detailAudioFilename);
          isset_detailAudioFilename = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 37:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->flipped);
          this->__isset.flipped = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_poseEntryId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_sessionId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_englishName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_sanskritName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_seconds)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_poseFilename)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_backgroundFilename)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_matFilename)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_swooshFilename)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_shadowFilename)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_shortAudioFilename)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_detailAudioFilename)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t PoseEntry::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("PoseEntry");

  xfer += oprot->writeFieldBegin("poseEntryId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->poseEntryId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sessionId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->sessionId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("englishName", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->englishName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sanskritName", ::apache::thrift::protocol::T_STRING, 11);
  xfer += oprot->writeString(this->sanskritName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("seconds", ::apache::thrift::protocol::T_I32, 20);
  xfer += oprot->writeI32(this->seconds);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("poseFilename", ::apache::thrift::protocol::T_STRING, 30);
  xfer += oprot->writeString(this->poseFilename);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("backgroundFilename", ::apache::thrift::protocol::T_STRING, 31);
  xfer += oprot->writeString(this->backgroundFilename);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("matFilename", ::apache::thrift::protocol::T_STRING, 32);
  xfer += oprot->writeString(this->matFilename);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("swooshFilename", ::apache::thrift::protocol::T_STRING, 33);
  xfer += oprot->writeString(this->swooshFilename);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("shadowFilename", ::apache::thrift::protocol::T_STRING, 34);
  xfer += oprot->writeString(this->shadowFilename);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("shortAudioFilename", ::apache::thrift::protocol::T_STRING, 35);
  xfer += oprot->writeString(this->shortAudioFilename);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("detailAudioFilename", ::apache::thrift::protocol::T_STRING, 36);
  xfer += oprot->writeString(this->detailAudioFilename);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.flipped) {
    xfer += oprot->writeFieldBegin("flipped", ::apache::thrift::protocol::T_BOOL, 37);
    xfer += oprot->writeBool(this->flipped);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PoseEntry &a, PoseEntry &b) {
  using ::std::swap;
  swap(a.poseEntryId, b.poseEntryId);
  swap(a.sessionId, b.sessionId);
  swap(a.englishName, b.englishName);
  swap(a.sanskritName, b.sanskritName);
  swap(a.seconds, b.seconds);
  swap(a.poseFilename, b.poseFilename);
  swap(a.backgroundFilename, b.backgroundFilename);
  swap(a.matFilename, b.matFilename);
  swap(a.swooshFilename, b.swooshFilename);
  swap(a.shadowFilename, b.shadowFilename);
  swap(a.shortAudioFilename, b.shortAudioFilename);
  swap(a.detailAudioFilename, b.detailAudioFilename);
  swap(a.flipped, b.flipped);
  swap(a.__isset, b.__isset);
}

PoseEntry::PoseEntry(const PoseEntry& other4) {
  poseEntryId = other4.poseEntryId;
  sessionId = other4.sessionId;
  englishName = other4.englishName;
  sanskritName = other4.sanskritName;
  seconds = other4.seconds;
  poseFilename = other4.poseFilename;
  backgroundFilename = other4.backgroundFilename;
  matFilename = other4.matFilename;
  swooshFilename = other4.swooshFilename;
  shadowFilename = other4.shadowFilename;
  shortAudioFilename = other4.shortAudioFilename;
  detailAudioFilename = other4.detailAudioFilename;
  flipped = other4.flipped;
  __isset = other4.__isset;
}
PoseEntry& PoseEntry::operator=(const PoseEntry& other5) {
  poseEntryId = other5.poseEntryId;
  sessionId = other5.sessionId;
  englishName = other5.englishName;
  sanskritName = other5.sanskritName;
  seconds = other5.seconds;
  poseFilename = other5.poseFilename;
  backgroundFilename = other5.backgroundFilename;
  matFilename = other5.matFilename;
  swooshFilename = other5.swooshFilename;
  shadowFilename = other5.shadowFilename;
  shortAudioFilename = other5.shortAudioFilename;
  detailAudioFilename = other5.detailAudioFilename;
  flipped = other5.flipped;
  __isset = other5.__isset;
  return *this;
}
void PoseEntry::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PoseEntry(";
  out << "poseEntryId=" << to_string(poseEntryId);
  out << ", " << "sessionId=" << to_string(sessionId);
  out << ", " << "englishName=" << to_string(englishName);
  out << ", " << "sanskritName=" << to_string(sanskritName);
  out << ", " << "seconds=" << to_string(seconds);
  out << ", " << "poseFilename=" << to_string(poseFilename);
  out << ", " << "backgroundFilename=" << to_string(backgroundFilename);
  out << ", " << "matFilename=" << to_string(matFilename);
  out << ", " << "swooshFilename=" << to_string(swooshFilename);
  out << ", " << "shadowFilename=" << to_string(shadowFilename);
  out << ", " << "shortAudioFilename=" << to_string(shortAudioFilename);
  out << ", " << "detailAudioFilename=" << to_string(detailAudioFilename);
  out << ", " << "flipped="; (__isset.flipped ? (out << to_string(flipped)) : (out << "<null>"));
  out << ")";
}


Session::~Session() throw() {
}


void Session::__set_sessionId(const SessionID& val) {
  this->sessionId = val;
}

void Session::__set_localizedName(const LocalizedString& val) {
  this->localizedName = val;
}

void Session::__set_subtitle(const LocalizedString& val) {
  this->subtitle = val;
__isset.subtitle = true;
}

void Session::__set_cardImage(const ResourceID& val) {
  this->cardImage = val;
}

void Session::__set_backgroundImage(const ResourceID& val) {
  this->backgroundImage = val;
}

void Session::__set_energyRating(const int8_t val) {
  this->energyRating = val;
}

void Session::__set_comingSoon(const bool val) {
  this->comingSoon = val;
__isset.comingSoon = true;
}

void Session::__set_poses(const std::vector<PoseEntry> & val) {
  this->poses = val;
__isset.poses = true;
}
std::ostream& operator<<(std::ostream& out, const Session& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Session::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_sessionId = false;
  bool isset_localizedName = false;
  bool isset_cardImage = false;
  bool isset_backgroundImage = false;
  bool isset_energyRating = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->sessionId);
          isset_sessionId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->localizedName);
          isset_localizedName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->subtitle);
          this->__isset.subtitle = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->cardImage);
          isset_cardImage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->backgroundImage);
          isset_backgroundImage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->energyRating);
          isset_energyRating = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 31:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->comingSoon);
          this->__isset.comingSoon = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 40:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->poses.clear();
            uint32_t _size6;
            ::apache::thrift::protocol::TType _etype9;
            xfer += iprot->readListBegin(_etype9, _size6);
            this->poses.resize(_size6);
            uint32_t _i10;
            for (_i10 = 0; _i10 < _size6; ++_i10)
            {
              xfer += this->poses[_i10].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.poses = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_sessionId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_localizedName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_cardImage)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_backgroundImage)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_energyRating)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Session::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Session");

  xfer += oprot->writeFieldBegin("sessionId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->sessionId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("localizedName", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->localizedName);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.subtitle) {
    xfer += oprot->writeFieldBegin("subtitle", ::apache::thrift::protocol::T_STRING, 11);
    xfer += oprot->writeString(this->subtitle);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("cardImage", ::apache::thrift::protocol::T_STRING, 20);
  xfer += oprot->writeString(this->cardImage);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("backgroundImage", ::apache::thrift::protocol::T_STRING, 21);
  xfer += oprot->writeString(this->backgroundImage);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("energyRating", ::apache::thrift::protocol::T_BYTE, 30);
  xfer += oprot->writeByte(this->energyRating);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.comingSoon) {
    xfer += oprot->writeFieldBegin("comingSoon", ::apache::thrift::protocol::T_BOOL, 31);
    xfer += oprot->writeBool(this->comingSoon);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.poses) {
    xfer += oprot->writeFieldBegin("poses", ::apache::thrift::protocol::T_LIST, 40);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->poses.size()));
      std::vector<PoseEntry> ::const_iterator _iter11;
      for (_iter11 = this->poses.begin(); _iter11 != this->poses.end(); ++_iter11)
      {
        xfer += (*_iter11).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Session &a, Session &b) {
  using ::std::swap;
  swap(a.sessionId, b.sessionId);
  swap(a.localizedName, b.localizedName);
  swap(a.subtitle, b.subtitle);
  swap(a.cardImage, b.cardImage);
  swap(a.backgroundImage, b.backgroundImage);
  swap(a.energyRating, b.energyRating);
  swap(a.comingSoon, b.comingSoon);
  swap(a.poses, b.poses);
  swap(a.__isset, b.__isset);
}

Session::Session(const Session& other12) {
  sessionId = other12.sessionId;
  localizedName = other12.localizedName;
  subtitle = other12.subtitle;
  cardImage = other12.cardImage;
  backgroundImage = other12.backgroundImage;
  energyRating = other12.energyRating;
  comingSoon = other12.comingSoon;
  poses = other12.poses;
  __isset = other12.__isset;
}
Session& Session::operator=(const Session& other13) {
  sessionId = other13.sessionId;
  localizedName = other13.localizedName;
  subtitle = other13.subtitle;
  cardImage = other13.cardImage;
  backgroundImage = other13.backgroundImage;
  energyRating = other13.energyRating;
  comingSoon = other13.comingSoon;
  poses = other13.poses;
  __isset = other13.__isset;
  return *this;
}
void Session::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Session(";
  out << "sessionId=" << to_string(sessionId);
  out << ", " << "localizedName=" << to_string(localizedName);
  out << ", " << "subtitle="; (__isset.subtitle ? (out << to_string(subtitle)) : (out << "<null>"));
  out << ", " << "cardImage=" << to_string(cardImage);
  out << ", " << "backgroundImage=" << to_string(backgroundImage);
  out << ", " << "energyRating=" << to_string(energyRating);
  out << ", " << "comingSoon="; (__isset.comingSoon ? (out << to_string(comingSoon)) : (out << "<null>"));
  out << ", " << "poses="; (__isset.poses ? (out << to_string(poses)) : (out << "<null>"));
  out << ")";
}


Data::~Data() throw() {
}


void Data::__set_schemaVersionId(const SchemaVersionID val) {
  this->schemaVersionId = val;
}

void Data::__set_poses(const std::vector<PoseEntry> & val) {
  this->poses = val;
__isset.poses = true;
}

void Data::__set_sessions(const std::vector<Session> & val) {
  this->sessions = val;
__isset.sessions = true;
}
std::ostream& operator<<(std::ostream& out, const Data& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Data::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_schemaVersionId = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->schemaVersionId);
          isset_schemaVersionId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->poses.clear();
            uint32_t _size14;
            ::apache::thrift::protocol::TType _etype17;
            xfer += iprot->readListBegin(_etype17, _size14);
            this->poses.resize(_size14);
            uint32_t _i18;
            for (_i18 = 0; _i18 < _size14; ++_i18)
            {
              xfer += this->poses[_i18].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.poses = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->sessions.clear();
            uint32_t _size19;
            ::apache::thrift::protocol::TType _etype22;
            xfer += iprot->readListBegin(_etype22, _size19);
            this->sessions.resize(_size19);
            uint32_t _i23;
            for (_i23 = 0; _i23 < _size19; ++_i23)
            {
              xfer += this->sessions[_i23].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.sessions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_schemaVersionId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Data::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Data");

  xfer += oprot->writeFieldBegin("schemaVersionId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->schemaVersionId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.poses) {
    xfer += oprot->writeFieldBegin("poses", ::apache::thrift::protocol::T_LIST, 10);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->poses.size()));
      std::vector<PoseEntry> ::const_iterator _iter24;
      for (_iter24 = this->poses.begin(); _iter24 != this->poses.end(); ++_iter24)
      {
        xfer += (*_iter24).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sessions) {
    xfer += oprot->writeFieldBegin("sessions", ::apache::thrift::protocol::T_LIST, 20);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->sessions.size()));
      std::vector<Session> ::const_iterator _iter25;
      for (_iter25 = this->sessions.begin(); _iter25 != this->sessions.end(); ++_iter25)
      {
        xfer += (*_iter25).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Data &a, Data &b) {
  using ::std::swap;
  swap(a.schemaVersionId, b.schemaVersionId);
  swap(a.poses, b.poses);
  swap(a.sessions, b.sessions);
  swap(a.__isset, b.__isset);
}

Data::Data(const Data& other26) {
  schemaVersionId = other26.schemaVersionId;
  poses = other26.poses;
  sessions = other26.sessions;
  __isset = other26.__isset;
}
Data& Data::operator=(const Data& other27) {
  schemaVersionId = other27.schemaVersionId;
  poses = other27.poses;
  sessions = other27.sessions;
  __isset = other27.__isset;
  return *this;
}
void Data::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Data(";
  out << "schemaVersionId=" << to_string(schemaVersionId);
  out << ", " << "poses="; (__isset.poses ? (out << to_string(poses)) : (out << "<null>"));
  out << ", " << "sessions="; (__isset.sessions ? (out << to_string(sessions)) : (out << "<null>"));
  out << ")";
}

}} // namespace
