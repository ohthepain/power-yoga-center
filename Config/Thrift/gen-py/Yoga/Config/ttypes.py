#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class Settings(object):
    """
    Attributes:
     - schemaVersionId
     - configVersionId
     - minClientVersion
     - pleaseUpdateVersion
    """


    def __init__(self, schemaVersionId=None, configVersionId=None, minClientVersion=None, pleaseUpdateVersion=None,):
        self.schemaVersionId = schemaVersionId
        self.configVersionId = configVersionId
        self.minClientVersion = minClientVersion
        self.pleaseUpdateVersion = pleaseUpdateVersion

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.schemaVersionId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.configVersionId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.minClientVersion = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.pleaseUpdateVersion = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Settings')
        if self.schemaVersionId is not None:
            oprot.writeFieldBegin('schemaVersionId', TType.I32, 1)
            oprot.writeI32(self.schemaVersionId)
            oprot.writeFieldEnd()
        if self.configVersionId is not None:
            oprot.writeFieldBegin('configVersionId', TType.I32, 2)
            oprot.writeI32(self.configVersionId)
            oprot.writeFieldEnd()
        if self.minClientVersion is not None:
            oprot.writeFieldBegin('minClientVersion', TType.STRING, 10)
            oprot.writeString(self.minClientVersion.encode('utf-8') if sys.version_info[0] == 2 else self.minClientVersion)
            oprot.writeFieldEnd()
        if self.pleaseUpdateVersion is not None:
            oprot.writeFieldBegin('pleaseUpdateVersion', TType.STRING, 11)
            oprot.writeString(self.pleaseUpdateVersion.encode('utf-8') if sys.version_info[0] == 2 else self.pleaseUpdateVersion)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.schemaVersionId is None:
            raise TProtocolException(message='Required field schemaVersionId is unset!')
        if self.configVersionId is None:
            raise TProtocolException(message='Required field configVersionId is unset!')
        if self.minClientVersion is None:
            raise TProtocolException(message='Required field minClientVersion is unset!')
        if self.pleaseUpdateVersion is None:
            raise TProtocolException(message='Required field pleaseUpdateVersion is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class UpgradeInfo(object):
    """
    Attributes:
     - upgradeInfoId
     - minClientVersion
     - pleaseUpdateVersion
    """


    def __init__(self, upgradeInfoId=None, minClientVersion=None, pleaseUpdateVersion=None,):
        self.upgradeInfoId = upgradeInfoId
        self.minClientVersion = minClientVersion
        self.pleaseUpdateVersion = pleaseUpdateVersion

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.upgradeInfoId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.minClientVersion = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.pleaseUpdateVersion = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('UpgradeInfo')
        if self.upgradeInfoId is not None:
            oprot.writeFieldBegin('upgradeInfoId', TType.STRING, 1)
            oprot.writeString(self.upgradeInfoId.encode('utf-8') if sys.version_info[0] == 2 else self.upgradeInfoId)
            oprot.writeFieldEnd()
        if self.minClientVersion is not None:
            oprot.writeFieldBegin('minClientVersion', TType.STRING, 10)
            oprot.writeString(self.minClientVersion.encode('utf-8') if sys.version_info[0] == 2 else self.minClientVersion)
            oprot.writeFieldEnd()
        if self.pleaseUpdateVersion is not None:
            oprot.writeFieldBegin('pleaseUpdateVersion', TType.STRING, 11)
            oprot.writeString(self.pleaseUpdateVersion.encode('utf-8') if sys.version_info[0] == 2 else self.pleaseUpdateVersion)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.upgradeInfoId is None:
            raise TProtocolException(message='Required field upgradeInfoId is unset!')
        if self.minClientVersion is None:
            raise TProtocolException(message='Required field minClientVersion is unset!')
        if self.pleaseUpdateVersion is None:
            raise TProtocolException(message='Required field pleaseUpdateVersion is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class PoseEntry(object):
    """
    Attributes:
     - poseEntryId
     - sessionId
     - englishName
     - sanskritName
     - seconds
     - poseFilename
     - backgroundFilename
     - matFilename
     - swooshFilename
     - shadowFilename
     - shortAudioFilename
     - detailAudioFilename
     - flipped
    """


    def __init__(self, poseEntryId=None, sessionId=None, englishName=None, sanskritName=None, seconds=None, poseFilename=None, backgroundFilename=None, matFilename=None, swooshFilename=None, shadowFilename=None, shortAudioFilename=None, detailAudioFilename=None, flipped=None,):
        self.poseEntryId = poseEntryId
        self.sessionId = sessionId
        self.englishName = englishName
        self.sanskritName = sanskritName
        self.seconds = seconds
        self.poseFilename = poseFilename
        self.backgroundFilename = backgroundFilename
        self.matFilename = matFilename
        self.swooshFilename = swooshFilename
        self.shadowFilename = shadowFilename
        self.shortAudioFilename = shortAudioFilename
        self.detailAudioFilename = detailAudioFilename
        self.flipped = flipped

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.poseEntryId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.sessionId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.englishName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.sanskritName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.I32:
                    self.seconds = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 30:
                if ftype == TType.STRING:
                    self.poseFilename = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 31:
                if ftype == TType.STRING:
                    self.backgroundFilename = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 32:
                if ftype == TType.STRING:
                    self.matFilename = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 33:
                if ftype == TType.STRING:
                    self.swooshFilename = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 34:
                if ftype == TType.STRING:
                    self.shadowFilename = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 35:
                if ftype == TType.STRING:
                    self.shortAudioFilename = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 36:
                if ftype == TType.STRING:
                    self.detailAudioFilename = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 37:
                if ftype == TType.BOOL:
                    self.flipped = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('PoseEntry')
        if self.poseEntryId is not None:
            oprot.writeFieldBegin('poseEntryId', TType.STRING, 1)
            oprot.writeString(self.poseEntryId.encode('utf-8') if sys.version_info[0] == 2 else self.poseEntryId)
            oprot.writeFieldEnd()
        if self.sessionId is not None:
            oprot.writeFieldBegin('sessionId', TType.STRING, 2)
            oprot.writeString(self.sessionId.encode('utf-8') if sys.version_info[0] == 2 else self.sessionId)
            oprot.writeFieldEnd()
        if self.englishName is not None:
            oprot.writeFieldBegin('englishName', TType.STRING, 10)
            oprot.writeString(self.englishName.encode('utf-8') if sys.version_info[0] == 2 else self.englishName)
            oprot.writeFieldEnd()
        if self.sanskritName is not None:
            oprot.writeFieldBegin('sanskritName', TType.STRING, 11)
            oprot.writeString(self.sanskritName.encode('utf-8') if sys.version_info[0] == 2 else self.sanskritName)
            oprot.writeFieldEnd()
        if self.seconds is not None:
            oprot.writeFieldBegin('seconds', TType.I32, 20)
            oprot.writeI32(self.seconds)
            oprot.writeFieldEnd()
        if self.poseFilename is not None:
            oprot.writeFieldBegin('poseFilename', TType.STRING, 30)
            oprot.writeString(self.poseFilename.encode('utf-8') if sys.version_info[0] == 2 else self.poseFilename)
            oprot.writeFieldEnd()
        if self.backgroundFilename is not None:
            oprot.writeFieldBegin('backgroundFilename', TType.STRING, 31)
            oprot.writeString(self.backgroundFilename.encode('utf-8') if sys.version_info[0] == 2 else self.backgroundFilename)
            oprot.writeFieldEnd()
        if self.matFilename is not None:
            oprot.writeFieldBegin('matFilename', TType.STRING, 32)
            oprot.writeString(self.matFilename.encode('utf-8') if sys.version_info[0] == 2 else self.matFilename)
            oprot.writeFieldEnd()
        if self.swooshFilename is not None:
            oprot.writeFieldBegin('swooshFilename', TType.STRING, 33)
            oprot.writeString(self.swooshFilename.encode('utf-8') if sys.version_info[0] == 2 else self.swooshFilename)
            oprot.writeFieldEnd()
        if self.shadowFilename is not None:
            oprot.writeFieldBegin('shadowFilename', TType.STRING, 34)
            oprot.writeString(self.shadowFilename.encode('utf-8') if sys.version_info[0] == 2 else self.shadowFilename)
            oprot.writeFieldEnd()
        if self.shortAudioFilename is not None:
            oprot.writeFieldBegin('shortAudioFilename', TType.STRING, 35)
            oprot.writeString(self.shortAudioFilename.encode('utf-8') if sys.version_info[0] == 2 else self.shortAudioFilename)
            oprot.writeFieldEnd()
        if self.detailAudioFilename is not None:
            oprot.writeFieldBegin('detailAudioFilename', TType.STRING, 36)
            oprot.writeString(self.detailAudioFilename.encode('utf-8') if sys.version_info[0] == 2 else self.detailAudioFilename)
            oprot.writeFieldEnd()
        if self.flipped is not None:
            oprot.writeFieldBegin('flipped', TType.BOOL, 37)
            oprot.writeBool(self.flipped)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.poseEntryId is None:
            raise TProtocolException(message='Required field poseEntryId is unset!')
        if self.sessionId is None:
            raise TProtocolException(message='Required field sessionId is unset!')
        if self.englishName is None:
            raise TProtocolException(message='Required field englishName is unset!')
        if self.sanskritName is None:
            raise TProtocolException(message='Required field sanskritName is unset!')
        if self.seconds is None:
            raise TProtocolException(message='Required field seconds is unset!')
        if self.poseFilename is None:
            raise TProtocolException(message='Required field poseFilename is unset!')
        if self.backgroundFilename is None:
            raise TProtocolException(message='Required field backgroundFilename is unset!')
        if self.matFilename is None:
            raise TProtocolException(message='Required field matFilename is unset!')
        if self.swooshFilename is None:
            raise TProtocolException(message='Required field swooshFilename is unset!')
        if self.shadowFilename is None:
            raise TProtocolException(message='Required field shadowFilename is unset!')
        if self.shortAudioFilename is None:
            raise TProtocolException(message='Required field shortAudioFilename is unset!')
        if self.detailAudioFilename is None:
            raise TProtocolException(message='Required field detailAudioFilename is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Session(object):
    """
    Attributes:
     - sessionId
     - localizedName
     - subtitle
     - cardImage
     - backgroundImage
     - energyRating
     - comingSoon
     - poses
    """


    def __init__(self, sessionId=None, localizedName=None, subtitle=None, cardImage=None, backgroundImage=None, energyRating=None, comingSoon=None, poses=None,):
        self.sessionId = sessionId
        self.localizedName = localizedName
        self.subtitle = subtitle
        self.cardImage = cardImage
        self.backgroundImage = backgroundImage
        self.energyRating = energyRating
        self.comingSoon = comingSoon
        self.poses = poses

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.sessionId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.localizedName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.subtitle = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.STRING:
                    self.cardImage = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.STRING:
                    self.backgroundImage = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 30:
                if ftype == TType.BYTE:
                    self.energyRating = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 31:
                if ftype == TType.BOOL:
                    self.comingSoon = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 40:
                if ftype == TType.LIST:
                    self.poses = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = PoseEntry()
                        _elem5.read(iprot)
                        self.poses.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Session')
        if self.sessionId is not None:
            oprot.writeFieldBegin('sessionId', TType.STRING, 1)
            oprot.writeString(self.sessionId.encode('utf-8') if sys.version_info[0] == 2 else self.sessionId)
            oprot.writeFieldEnd()
        if self.localizedName is not None:
            oprot.writeFieldBegin('localizedName', TType.STRING, 10)
            oprot.writeString(self.localizedName.encode('utf-8') if sys.version_info[0] == 2 else self.localizedName)
            oprot.writeFieldEnd()
        if self.subtitle is not None:
            oprot.writeFieldBegin('subtitle', TType.STRING, 11)
            oprot.writeString(self.subtitle.encode('utf-8') if sys.version_info[0] == 2 else self.subtitle)
            oprot.writeFieldEnd()
        if self.cardImage is not None:
            oprot.writeFieldBegin('cardImage', TType.STRING, 20)
            oprot.writeString(self.cardImage.encode('utf-8') if sys.version_info[0] == 2 else self.cardImage)
            oprot.writeFieldEnd()
        if self.backgroundImage is not None:
            oprot.writeFieldBegin('backgroundImage', TType.STRING, 21)
            oprot.writeString(self.backgroundImage.encode('utf-8') if sys.version_info[0] == 2 else self.backgroundImage)
            oprot.writeFieldEnd()
        if self.energyRating is not None:
            oprot.writeFieldBegin('energyRating', TType.BYTE, 30)
            oprot.writeByte(self.energyRating)
            oprot.writeFieldEnd()
        if self.comingSoon is not None:
            oprot.writeFieldBegin('comingSoon', TType.BOOL, 31)
            oprot.writeBool(self.comingSoon)
            oprot.writeFieldEnd()
        if self.poses is not None:
            oprot.writeFieldBegin('poses', TType.LIST, 40)
            oprot.writeListBegin(TType.STRUCT, len(self.poses))
            for iter6 in self.poses:
                iter6.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.sessionId is None:
            raise TProtocolException(message='Required field sessionId is unset!')
        if self.localizedName is None:
            raise TProtocolException(message='Required field localizedName is unset!')
        if self.cardImage is None:
            raise TProtocolException(message='Required field cardImage is unset!')
        if self.backgroundImage is None:
            raise TProtocolException(message='Required field backgroundImage is unset!')
        if self.energyRating is None:
            raise TProtocolException(message='Required field energyRating is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Data(object):
    """
    Attributes:
     - schemaVersionId
     - poses
     - sessions
    """


    def __init__(self, schemaVersionId=None, poses=None, sessions=None,):
        self.schemaVersionId = schemaVersionId
        self.poses = poses
        self.sessions = sessions

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.schemaVersionId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.LIST:
                    self.poses = []
                    (_etype10, _size7) = iprot.readListBegin()
                    for _i11 in range(_size7):
                        _elem12 = PoseEntry()
                        _elem12.read(iprot)
                        self.poses.append(_elem12)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.LIST:
                    self.sessions = []
                    (_etype16, _size13) = iprot.readListBegin()
                    for _i17 in range(_size13):
                        _elem18 = Session()
                        _elem18.read(iprot)
                        self.sessions.append(_elem18)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Data')
        if self.schemaVersionId is not None:
            oprot.writeFieldBegin('schemaVersionId', TType.I32, 1)
            oprot.writeI32(self.schemaVersionId)
            oprot.writeFieldEnd()
        if self.poses is not None:
            oprot.writeFieldBegin('poses', TType.LIST, 10)
            oprot.writeListBegin(TType.STRUCT, len(self.poses))
            for iter19 in self.poses:
                iter19.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.sessions is not None:
            oprot.writeFieldBegin('sessions', TType.LIST, 20)
            oprot.writeListBegin(TType.STRUCT, len(self.sessions))
            for iter20 in self.sessions:
                iter20.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.schemaVersionId is None:
            raise TProtocolException(message='Required field schemaVersionId is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(Settings)
Settings.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'schemaVersionId', None, None, ),  # 1
    (2, TType.I32, 'configVersionId', None, None, ),  # 2
    None,  # 3
    None,  # 4
    None,  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    (10, TType.STRING, 'minClientVersion', 'UTF8', None, ),  # 10
    (11, TType.STRING, 'pleaseUpdateVersion', 'UTF8', None, ),  # 11
)
all_structs.append(UpgradeInfo)
UpgradeInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'upgradeInfoId', 'UTF8', None, ),  # 1
    None,  # 2
    None,  # 3
    None,  # 4
    None,  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    (10, TType.STRING, 'minClientVersion', 'UTF8', None, ),  # 10
    (11, TType.STRING, 'pleaseUpdateVersion', 'UTF8', None, ),  # 11
)
all_structs.append(PoseEntry)
PoseEntry.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'poseEntryId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'sessionId', 'UTF8', None, ),  # 2
    None,  # 3
    None,  # 4
    None,  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    (10, TType.STRING, 'englishName', 'UTF8', None, ),  # 10
    (11, TType.STRING, 'sanskritName', 'UTF8', None, ),  # 11
    None,  # 12
    None,  # 13
    None,  # 14
    None,  # 15
    None,  # 16
    None,  # 17
    None,  # 18
    None,  # 19
    (20, TType.I32, 'seconds', None, None, ),  # 20
    None,  # 21
    None,  # 22
    None,  # 23
    None,  # 24
    None,  # 25
    None,  # 26
    None,  # 27
    None,  # 28
    None,  # 29
    (30, TType.STRING, 'poseFilename', 'UTF8', None, ),  # 30
    (31, TType.STRING, 'backgroundFilename', 'UTF8', None, ),  # 31
    (32, TType.STRING, 'matFilename', 'UTF8', None, ),  # 32
    (33, TType.STRING, 'swooshFilename', 'UTF8', None, ),  # 33
    (34, TType.STRING, 'shadowFilename', 'UTF8', None, ),  # 34
    (35, TType.STRING, 'shortAudioFilename', 'UTF8', None, ),  # 35
    (36, TType.STRING, 'detailAudioFilename', 'UTF8', None, ),  # 36
    (37, TType.BOOL, 'flipped', None, None, ),  # 37
)
all_structs.append(Session)
Session.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'sessionId', 'UTF8', None, ),  # 1
    None,  # 2
    None,  # 3
    None,  # 4
    None,  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    (10, TType.STRING, 'localizedName', 'UTF8', None, ),  # 10
    (11, TType.STRING, 'subtitle', 'UTF8', None, ),  # 11
    None,  # 12
    None,  # 13
    None,  # 14
    None,  # 15
    None,  # 16
    None,  # 17
    None,  # 18
    None,  # 19
    (20, TType.STRING, 'cardImage', 'UTF8', None, ),  # 20
    (21, TType.STRING, 'backgroundImage', 'UTF8', None, ),  # 21
    None,  # 22
    None,  # 23
    None,  # 24
    None,  # 25
    None,  # 26
    None,  # 27
    None,  # 28
    None,  # 29
    (30, TType.BYTE, 'energyRating', None, None, ),  # 30
    (31, TType.BOOL, 'comingSoon', None, None, ),  # 31
    None,  # 32
    None,  # 33
    None,  # 34
    None,  # 35
    None,  # 36
    None,  # 37
    None,  # 38
    None,  # 39
    (40, TType.LIST, 'poses', (TType.STRUCT, [PoseEntry, None], False), None, ),  # 40
)
all_structs.append(Data)
Data.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'schemaVersionId', None, None, ),  # 1
    None,  # 2
    None,  # 3
    None,  # 4
    None,  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    (10, TType.LIST, 'poses', (TType.STRUCT, [PoseEntry, None], False), None, ),  # 10
    None,  # 11
    None,  # 12
    None,  # 13
    None,  # 14
    None,  # 15
    None,  # 16
    None,  # 17
    None,  # 18
    None,  # 19
    (20, TType.LIST, 'sessions', (TType.STRUCT, [Session, None], False), None, ),  # 20
)
fix_spec(all_structs)
del all_structs
